'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

var focusableElementsSelector = ['input', 'select', 'button', 'textarea'].map(function (field) { return (field + ":not([disabled])"); }).concat( ['a[href]'],
  ['video[controls]'],
  ['audio[controls]'],
  ['[tabindex]:not([tabindex^="-"])'],
  ['[contenteditable]:not([contenteditable="false"])']
).join(',');

var script = {
  name: 'FocusLoop',

  props: {
    disabled: {
      type: Boolean,
      default: false
    },
    isVisible: {
      type: Boolean,
      default: false
    }
  },

  data: function data () {
    return {
      alreadyFocused: false
    }
  },

  computed: {
    getTabindex: function getTabindex () {
      return this.disabled ? -1 : 0
    }
  },

  watch: {
    isVisible: 'focusFirst'
  },

  mounted: function mounted () {
    this.focusFirst(this.isVisible || true);
  },

  methods: {
    getFocusableElements: function getFocusableElements () {
      var focusableElements = this.$refs.focusLoop.querySelectorAll(focusableElementsSelector);
      if (focusableElements && focusableElements.length) { return focusableElements }
      return []
    },

    focusFirst: function focusFirst (visible) {
      if (!visible) { return }
      var elements = this.getFocusableElements();
      if (elements.length) { setTimeout(function () { return elements[0].focus(); }, 200); }
    },

    handleFocusStart: function handleFocusStart () {
      var elements = this.getFocusableElements();
      if (elements.length) {
        var index = this.alreadyFocused ? elements.length - 1 : 0;
        this.alreadyFocused = true;
        elements[index].focus();
      }
    },

    handleFocusEnd: function handleFocusEnd () {
      var elements = this.getFocusableElements();
      elements.length && elements[0].focus();
    }
  }
};

function normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier /* server only */, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    if (typeof shadowMode !== 'boolean') {
        createInjectorSSR = createInjector;
        createInjector = shadowMode;
        shadowMode = false;
    }
    // Vue.extend constructor export interop.
    var options = typeof script === 'function' ? script.options : script;
    // render functions
    if (template && template.render) {
        options.render = template.render;
        options.staticRenderFns = template.staticRenderFns;
        options._compiled = true;
        // functional template
        if (isFunctionalTemplate) {
            options.functional = true;
        }
    }
    // scopedId
    if (scopeId) {
        options._scopeId = scopeId;
    }
    var hook;
    if (moduleIdentifier) {
        // server build
        hook = function (context) {
            // 2.3 injection
            context =
                context || // cached call
                    (this.$vnode && this.$vnode.ssrContext) || // stateful
                    (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext); // functional
            // 2.2 with runInNewContext: true
            if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
                context = __VUE_SSR_CONTEXT__;
            }
            // inject component styles
            if (style) {
                style.call(this, createInjectorSSR(context));
            }
            // register component module identifier for async chunk inference
            if (context && context._registeredComponents) {
                context._registeredComponents.add(moduleIdentifier);
            }
        };
        // used by ssr in case component is cached and beforeCreate
        // never gets called
        options._ssrRegister = hook;
    }
    else if (style) {
        hook = shadowMode
            ? function (context) {
                style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
            }
            : function (context) {
                style.call(this, createInjector(context));
            };
    }
    if (hook) {
        if (options.functional) {
            // register for functional component in vue file
            var originalRender = options.render;
            options.render = function renderWithStyleInjection(h, context) {
                hook.call(context);
                return originalRender(h, context);
            };
        }
        else {
            // inject component registration as beforeCreate hook
            var existing = options.beforeCreate;
            options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
    }
    return script;
}

/* script */
var __vue_script__ = script;

/* template */
var __vue_render__ = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"vue-focus-loop"},[_vm._ssrNode("<div"+(_vm._ssrAttr("tabindex",_vm.getTabindex))+"></div> "),_vm._ssrNode("<div>","</div>",[_vm._t("default")],2),_vm._ssrNode(" <div"+(_vm._ssrAttr("tabindex",_vm.getTabindex))+"></div>")],2)};
var __vue_staticRenderFns__ = [];

  /* style */
  var __vue_inject_styles__ = undefined;
  /* scoped */
  var __vue_scope_id__ = undefined;
  /* module identifier */
  var __vue_module_identifier__ = "data-v-4d7221a6";
  /* functional template */
  var __vue_is_functional_template__ = false;
  /* style inject */
  
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  var __vue_component__ = /*#__PURE__*/normalizeComponent(
    { render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ },
    __vue_inject_styles__,
    __vue_script__,
    __vue_scope_id__,
    __vue_is_functional_template__,
    __vue_module_identifier__,
    false,
    undefined,
    undefined,
    undefined
  );

function install (Vue) {
  if (install.installed) { return }
  install.installed = true;
  Vue.component('FocusLoop', __vue_component__);
}

// auto install
if (typeof window !== 'undefined' && typeof window.Vue !== 'undefined') {
  window.Vue.use(install);
}

exports.FocusLoop = __vue_component__;
exports.default = install;
